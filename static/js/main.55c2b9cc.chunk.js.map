{"version":3,"sources":["DAL/mock-data.ts","DAL/api.ts","store/actions.ts","store/types.ts","components/Form/Form.tsx","utils/validateAddress.ts","components/MapTaxi/MapTaxi.tsx","components/Car/Car.tsx","utils/selectors.ts","components/FindCar/FindCar.tsx","store/reducers.ts","store/index.ts","utils/dateFormat.ts","components/Car/CarLine.tsx","components/CarList/CarList.tsx","components/Form/FormAction.tsx","components/App/App.tsx","index.tsx"],"names":["dataCrew","getCrewFromAddress","object","Promise","resolve","reject","code","changeAddress","address","withCoord","type","useStyles","makeStyles","container","display","flexWrap","textField","marginLeft","marginRight","dense","marginTop","menu","width","connect","state","main","coord","isValid","props","classes","getHelperText","Boolean","className","noValidate","autoComplete","TextField","id","label","value","onChange","e","target","margin","variant","error","helperText","validateAddress","toLowerCase","split","street","house","test","trim","setCoord","payload","useState","undefined","mapState","setMapState","name","mapGeoLocation","setMapGeoLocation","geocodeExec","useRef","getGeocode","position","current","geocode","then","res","geoObjects","get","properties","getAll","boundedBy","catch","err","console","log","useEffect","Typography","gutterBottom","query","apikey","process","center","zoom","modules","onLoad","ymaps","geolocation","provider","mapStateAutoApply","getGeoLocation","result","onClick","coords","options","preset","iconColor","iconCaption","geometry","root","alignItems","maxWidth","h","marginBottom","Car","Card","CardContent","component","car_mark","color","car_color","Button","size","car_number","getCrewSort","createSelector","findedCrew","data","crewData","crews_info","sort","a","b","distance","icon","length","initialState","sendOrder","rootReducer","combineReducers","action","createStore","applyMiddleware","thunk","getDateFormat","now","Date","getFullYear","toString","pad","getMonth","getDate","getHours","getMinutes","getSeconds","number","str","padding","justifyContent","borderRadius","borderBottom","CarLine","crewSort","getFindedCrew","dispatch","source_time","addresses","lat","lon","array","descr","map","crew","key","crew_id","CardActions","suitableCar","disabled","minWidth","App","store","Divider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55c2b9cc.chunk.js","sourcesContent":["import {ApiDataType, CrewApiDataType, OrderResponseType} from \"./types\";\r\n\r\nexport const dataCrew: ApiDataType<CrewApiDataType> = {\r\n    \"code\": 0,\r\n    \"descr\": \"OK\",\r\n    \"data\": {\r\n        \"crews_info\": [\r\n            {\r\n                \"crew_id\": 123,\r\n                \"car_mark\": \"Chevrolet\",\r\n                \"car_model\": \"Lacetti\",\r\n                \"car_color\": \"синий\",\r\n                \"car_number\": \"Е234КУ\",\r\n                \"driver_name\": \"Деточкин\",\r\n                \"driver_phone\": \"7788\",\r\n                \"lat\": 56.855532,\r\n                \"lon\": 53.217462,\r\n                \"distance\": 300\r\n            }, {\r\n                \"crew_id\": 125,\r\n                \"car_mark\": \"Hyundai\",\r\n                \"car_model\": \"Solaris\",\r\n                \"car_color\": \"белый\",\r\n                \"car_number\": \"Ф567АС\",\r\n                \"driver_name\": \"Петров\",\r\n                \"driver_phone\": \"8899\",\r\n                \"lat\": 56.860581,\r\n                \"lon\": 53.209223,\r\n                \"distance\": 1200\r\n            }, {\r\n                \"crew_id\": 126,\r\n                \"car_mark\": \"Chevrolet\",\r\n                \"car_model\": \"Aveo\",\r\n                \"car_color\": \"синий\",\r\n                \"car_number\": \"Е234КУ\",\r\n                \"driver_name\": \"Деточкин\",\r\n                \"driver_phone\": \"6688\",\r\n                \"lat\": 57.855532,\r\n                \"lon\": 52.217462,\r\n                \"distance\": 400\r\n            }, {\r\n                \"crew_id\": 128,\r\n                \"car_mark\": \"Chevrolet\",\r\n                \"car_model\": \"Lanos\",\r\n                \"car_color\": \"белый\",\r\n                \"car_number\": \"Ф525АС\",\r\n                \"driver_name\": \"Петрович\",\r\n                \"driver_phone\": \"4455\",\r\n                \"lat\": 53.860581,\r\n                \"lon\": 51.209223,\r\n                \"distance\": 500\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nexport const dataOrder: OrderResponseType = {\r\n    \"code\": 0,\r\n    \"descr\": \"OK\",\r\n    \"data\": {\r\n        \"order_id\": 12345\r\n    }\r\n}\r\n\r\n\r\n","import {ApiDataType, CrewApiDataType, CrewRequestType, OrderRequestType, OrderResponseType} from \"./types\";\r\nimport {dataCrew, dataOrder} from \"./mock-data\";\r\n\r\nexport const getCrewFromAddress = (object: CrewRequestType): Promise<ApiDataType<CrewApiDataType>> => {\r\n    return new Promise(\r\n        (resolve, reject) => {\r\n            if (dataCrew.code) {\r\n                reject(dataCrew)\r\n            } else {\r\n                resolve(dataCrew)\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport const sendOrder = (object: OrderRequestType): Promise<OrderResponseType> => {\r\n    return new Promise(\r\n        (resolve, reject) => {\r\n            if (dataOrder.code) {\r\n                reject(dataOrder)\r\n            } else {\r\n                resolve(dataOrder)\r\n            }\r\n        }\r\n    )\r\n}\r\n","import {CHANGE_ADDRESS, SET_COORD, MainActionTypes, CoordType, SET_CREWS, SEND_ORDER} from './types'\r\nimport {CrewRequestType, OrderRequestType} from \"../DAL/types\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootState} from \"./index\";\r\nimport { Action } from 'redux';\r\nimport { getCrewFromAddress } from '../DAL/api';\r\n\r\nexport function changeAddress(address: string, withCoord: boolean): MainActionTypes {\r\n    return {\r\n        type: CHANGE_ADDRESS,\r\n        address,\r\n        withCoord\r\n    }\r\n}\r\n\r\nexport function setCoord(coord: CoordType): MainActionTypes {\r\n    return {\r\n        type: SET_COORD,\r\n        payload: coord\r\n    }\r\n}\r\n\r\nexport function getFindedCrew(object: CrewRequestType): ThunkAction<void, RootState, unknown, Action<string>> {\r\n    return dispatch => {\r\n        getCrewFromAddress(object).then(res => {\r\n            dispatch({\r\n                type: SET_CREWS,\r\n                payload: res\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport function sendOrder(object: OrderRequestType): ThunkAction<void, RootState, unknown, Action<string>> {\r\n    return dispatch => {\r\n        getCrewFromAddress(object).then(res => {\r\n            dispatch({\r\n                type: SEND_ORDER,\r\n                payload: res.descr\r\n            })\r\n        })\r\n    }\r\n}\r\n","import {ApiDataType, CrewApiDataType} from \"../DAL/types\"\r\n\r\nexport const CHANGE_ADDRESS = 'CHANGE_ADDRESS'\r\nexport const SET_COORD = 'SET_COORD'\r\nexport const SET_CREWS = 'SET_CREWS'\r\nexport const SEND_ORDER = 'SEND_ORDER'\r\n\r\ninterface ChangeAddressAction {\r\n    type: typeof CHANGE_ADDRESS\r\n    address: string\r\n    withCoord?: boolean\r\n}\r\n\r\ninterface SetCoordAction {\r\n    type: typeof SET_COORD\r\n    payload: CoordType\r\n}\r\n\r\ninterface SetCrews {\r\n    type: typeof SET_CREWS\r\n    payload: ApiDataType<CrewApiDataType>\r\n}\r\n\r\ninterface SendOrder {\r\n    type: typeof SEND_ORDER\r\n    payload: string\r\n}\r\n\r\n\r\nexport type MainActionTypes = ChangeAddressAction | SetCoordAction | SetCrews | SendOrder\r\n\r\nexport type CoordType = Array<number> | undefined\r\n\r\nexport interface MainState {\r\n    address: string\r\n    coord: CoordType\r\n    isValid: boolean\r\n    findedCrew: ApiDataType<CrewApiDataType> | null\r\n    sendOrder: string\r\n}\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport {RootState} from \"../../store\"\r\nimport {CoordType} from \"../../store/types\"\r\nimport {changeAddress} from \"../../store/actions\"\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: 10,\r\n        marginRight: 10,\r\n    },\r\n    dense: {\r\n        marginTop: 16,\r\n    },\r\n    menu: {\r\n        width: 200,\r\n    },\r\n});\r\n\r\nfunction Form(props: any) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChangeAddress = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const {changeAddress} = props\r\n        changeAddress(e.target.value)\r\n    }\r\n\r\n    const getHelperText = !props.isValid && Boolean(props.address) ? 'Введите корректный адрес' : ''\r\n\r\n    return (\r\n        <form className={classes.container} noValidate autoComplete=\"off\">\r\n            <TextField\r\n                id=\"address\"\r\n                label=\"Откуда\"\r\n                className={classes.textField}\r\n                value={props.address}\r\n                onChange={handleChangeAddress}\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                error={Boolean(props.address) && !props.isValid}\r\n                helperText={getHelperText}\r\n            />\r\n        </form>)\r\n}\r\n\r\ntype FormState = {\r\n    address: string\r\n    coord: CoordType\r\n    isValid: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): FormState => ({\r\n    address: state.main.address,\r\n    coord: state.main.coord,\r\n    isValid: state.main.isValid,\r\n})\r\n\r\nexport default connect(mapStateToProps, {changeAddress})(Form);\r\n","export const validateAddress = (address: string): boolean => {\r\n    const [street, house=''] = address.toLowerCase().split(',')\r\n    return /[А-Яа-яёЁ0-9\\-\\\\s\\\\.\\\\/]+$/.test(street.trim()) && /^[0-9][А-Яа-яёЁ0-9\\\\/]*$/.test(house.trim())\r\n    \r\n}\r\n","import React, {useEffect, useRef, useState} from 'react'\r\nimport {YMaps, Map, Placemark, PlacemarkGeometry, YMapsApi} from 'react-yandex-maps'\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport {connect} from 'react-redux'\r\nimport {RootState} from '../../store'\r\nimport {CoordType} from \"../../store/types\"\r\nimport {changeAddress, setCoord} from \"../../store/actions\"\r\nimport {validateAddress} from \"../../utils/validateAddress\"\r\n\r\nfunction MapTaxi(props: any) {\r\n\r\n    const [mapState, setMapState] = useState<YMapsApi | undefined>(undefined)\r\n    const [mapGeoLocation, setMapGeoLocation] = useState({name: '', coord: [0, 0]})\r\n\r\n    const geocodeExec = useRef<boolean>(false)\r\n\r\n    const getGeoLocation = (ymaps: YMapsApi): Promise<any> => {\r\n        return ymaps.geolocation.get({provider: \"yandex\", mapStateAutoApply: true})\r\n    }\r\n\r\n    const getGeocode = (position: PlacemarkGeometry | string): void => {\r\n        geocodeExec.current = true\r\n        mapState?.geocode(position).then((res: any): void => {\r\n            geocodeExec.current = false\r\n\r\n            if (typeof position === \"string\") {\r\n                const {setCoord} = props\r\n                setCoord(res?.geoObjects?.get(0).properties?.getAll()?.boundedBy[0]);\r\n            } else {\r\n                const {changeAddress} = props\r\n                const address = res?.geoObjects?.get(0)?.properties?.getAll()?.name\r\n                changeAddress(validateAddress(address) ? address : '', true)\r\n            }\r\n\r\n        }).catch((err: any) => console.log(err))\r\n    }\r\n\r\n    const initialMap = (ymaps: YMapsApi): void => {\r\n        setMapState(ymaps)\r\n        getGeoLocation(ymaps).then(result => {\r\n            setMapGeoLocation({\r\n                name: result.geoObjects.get(0).properties.getAll().name,\r\n                coord: result.geoObjects.position\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const {coord, address, isValid} = props\r\n        if (!geocodeExec.current && !coord && mapState && address && isValid) {\r\n            getGeocode(`${mapGeoLocation.name},${address}`)\r\n        }\r\n    }, [props.coord, props.address, props.isValid, mapState]);\r\n\r\n\r\n    const handleClickMap = (e: any): void => {\r\n        const {setCoord} = props\r\n        const coords = e.get('coords');\r\n        setCoord(coords)\r\n        getGeocode(coords)\r\n    }\r\n\r\n\r\n    return <>\r\n        {!Boolean(mapState) && <Typography variant=\"subtitle2\" gutterBottom>Карта загружается....</Typography>}\r\n        <div className={!Boolean(mapState) ? 'not-visible' : ''}>\r\n            <YMaps\r\n                query={{\r\n                    apikey: process.env.REACT_APP_API_YMAPS_KEY,\r\n                }}>\r\n                <div>\r\n                    <Map state={{center: props.coord || mapGeoLocation.coord, zoom: 16}}\r\n                         modules={[\"geolocation\", \"geocode\"]}\r\n                         onLoad={initialMap}\r\n                         onClick={handleClickMap}\r\n                    >\r\n                        {Boolean(props.coord) && <Placemark\r\n                            options={{preset: 'islands#icon', iconColor: props.isValid ? 'yellow' : 'red'}}\r\n                            properties={{iconCaption: props.isValid ? '' : 'Адрес не найден'}}\r\n                            geometry={props.coord}/>}\r\n                    </Map>\r\n                </div>\r\n            </YMaps>\r\n        </div>\r\n    </>\r\n\r\n}\r\n\r\ninterface MapTaxiState {\r\n    address: string\r\n    coord: CoordType\r\n    isValid: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): MapTaxiState => ({\r\n    address: state.main.address,\r\n    coord: state.main.coord,\r\n    isValid: state.main.isValid,\r\n})\r\n\r\nexport default connect(mapStateToProps, {setCoord, changeAddress})(MapTaxi)\r\n","import React from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport {CrewDataType} from '../../DAL/types'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        maxWidth: 250,\r\n    },\r\n    h: {\r\n        marginBottom: 10,\r\n    },\r\n    container: {\r\n        margin: 20\r\n    }\r\n})\r\n\r\nfunction Car(props: CrewDataType) {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography variant=\"caption\" component=\"span\">\r\n                    {props.car_mark}\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">\r\n                    {props.car_color}\r\n                </Typography>\r\n                <Button variant=\"outlined\" size=\"medium\" color=\"primary\">\r\n                    {props.car_number}\r\n                </Button>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\n\r\nexport default Car\r\n","import {createSelector} from \"reselect\"\r\nimport {Selector} from \"react-redux\"\r\nimport {RootState} from \"../store\"\r\nimport {CrewApiDataType, CrewDataType} from \"../DAL/types\"\r\n\r\nconst getCrewData: Selector<RootState, CrewApiDataType | undefined> = state => state.main.findedCrew?.data\r\n\r\n\r\nexport const getCrewSort = createSelector<RootState, CrewApiDataType | undefined, Array<CrewDataType> | []>(\r\n    getCrewData,\r\n    (crewData) => (crewData && crewData.crews_info ? [...crewData.crews_info].sort((a, b) => a.distance - b.distance) : [])\r\n)\r\n","import React from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport Car from \"../Car/Car\"\r\nimport {CrewDataType} from \"../../DAL/types\"\r\nimport {RootState} from \"../../store\"\r\nimport {connect} from \"react-redux\"\r\nimport {getCrewSort} from \"../../utils/selectors\"\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        maxWidth: 250,\r\n    },\r\n    h: {\r\n        marginBottom: 10,\r\n    },\r\n    container: {\r\n        margin: 20\r\n    },\r\n    icon: {\r\n        width: 20,\r\n        marginLeft: 10\r\n    }\r\n})\r\n\r\nfunction FindCar(props: FindCarState) {\r\n    const classes = useStyles();\r\n\r\n    if (!props.findedCrew || !props.findedCrew.length) return null\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Typography className={classes.h} variant=\"h6\" component=\"h3\">\r\n                Подходящий экипаж\r\n            </Typography>\r\n            <Car {...props.findedCrew[0]}/>\r\n        </div>\r\n    );\r\n}\r\ntype FindCarState = {\r\n    findedCrew: Array<CrewDataType> | []\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): FindCarState => ({\r\n    findedCrew: getCrewSort(state)\r\n})\r\n\r\nexport default connect(mapStateToProps)(FindCar)\r\n","import { validateAddress } from '../utils/validateAddress'\r\nimport {CHANGE_ADDRESS, MainActionTypes, MainState, SET_COORD, SET_CREWS} from './types'\r\n\r\nconst initialState: MainState = {\r\n    address: '',\r\n    coord: undefined,\r\n    isValid: false,\r\n    findedCrew: null,\r\n    sendOrder: ''\r\n}\r\n\r\nexport function searchReducer(\r\n    state = initialState,\r\n    action: MainActionTypes\r\n): MainState {\r\n    switch (action.type) {\r\n        case CHANGE_ADDRESS:\r\n            return {\r\n                ...state,\r\n                address: action.address,\r\n                coord: action.withCoord ? state.coord : undefined,\r\n                isValid: validateAddress(action.address),\r\n                findedCrew: null\r\n            }\r\n\r\n        case SET_COORD:\r\n            return {\r\n                ...state,\r\n                coord: action.payload\r\n            }\r\n\r\n        case SET_CREWS:\r\n            return {\r\n                ...state,\r\n                findedCrew: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { searchReducer } from './reducers'\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\n\r\nconst rootReducer = combineReducers({\r\n    main: searchReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport default createStore(rootReducer, applyMiddleware(thunk))\r\n","export const getDateFormat = (): string => {\r\n    const now = new Date()\r\n\r\n    const yyyy = now.getFullYear().toString()\r\n    const MM = pad(now.getMonth() + 1, 2)\r\n    const dd = pad(now.getDate(), 2)\r\n    const hh = pad(now.getHours(), 2)\r\n    const mm = pad(now.getMinutes(), 2)\r\n    const ss = pad(now.getSeconds(), 2)\r\n\r\n    return yyyy + MM + dd + hh + mm + ss\r\n}\r\n\r\nconst pad = (number: number, length: number): string => {\r\n    let str = '' + number\r\n    while (str.length < length) {\r\n        str = '0' + str\r\n    }\r\n    return str\r\n}\r\n","import React from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport { CrewDataType } from '../../DAL/types'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        padding: '0 10px 0 0',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        width: 250,\r\n        borderRadius: 0,\r\n        borderBottom: '1px solid #000',\r\n    },\r\n    h: {\r\n        marginBottom: 10,\r\n    },\r\n    container: {\r\n        margin: 0,\r\n        padding: '8px 10px'\r\n    }\r\n})\r\n\r\n\r\nfunction CarLine(props: CrewDataType) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n            <Card className={classes.root}>\r\n                <CardContent className={classes.container}>\r\n                    <Typography variant=\"caption\" component=\"span\">\r\n                        {props.car_mark}\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">\r\n                        {props.car_color}\r\n                    </Typography>\r\n                </CardContent>\r\n                <Typography color=\"textSecondary\">\r\n                    {props.distance} m\r\n                </Typography>\r\n            </Card>\r\n    );\r\n}\r\n\r\n\r\nexport default CarLine;\r\n","import React, {useEffect} from \"react\"\r\nimport {CoordType} from \"../../store/types\"\r\nimport {RootState} from \"../../store\"\r\nimport {connect} from \"react-redux\"\r\nimport {getFindedCrew} from \"../../store/actions\"\r\nimport {ApiDataType, CrewApiDataType, CrewDataType} from \"../../DAL/types\"\r\nimport {getDateFormat} from \"../../utils/dateFormat\"\r\nimport {Card} from \"@material-ui/core\"\r\nimport CarLine from \"../Car/CarLine\"\r\nimport {getCrewSort} from \"../../utils/selectors\"\r\n\r\ntype CarListProps  = CarListActions & CarListState\r\n\r\nfunction CarList(props: CarListProps) {\r\n\r\n    useEffect(() => {\r\n        const {coord, address, isValid, getFindedCrew} = props\r\n        if (coord && address && isValid) {\r\n            getFindedCrew({\r\n                source_time: getDateFormat(),\r\n                addresses: [\r\n                    {\r\n                        address,\r\n                        lat: coord[0],\r\n                        lon: coord[1]\r\n                    }\r\n                ]\r\n            })\r\n        }\r\n    }, [props.coord, props.address, props.isValid])\r\n\r\n    if (!props.findedCrew) return null\r\n\r\n    const array = props.crewSort && props.crewSort.length  ? props.crewSort : undefined\r\n\r\n    return (\r\n        <Card>\r\n            {props.findedCrew.code !== 0 && `Возникли ошибки при получении данных ${props.findedCrew.descr}`}\r\n            {array?.map(crew => <CarLine key={crew.crew_id} {...crew}/>)}\r\n        </Card>\r\n    )\r\n}\r\n\r\ninterface CarListState {\r\n    address: string\r\n    coord: CoordType\r\n    isValid: boolean\r\n    findedCrew: ApiDataType<CrewApiDataType> | null\r\n    crewSort: Array<CrewDataType> | []\r\n}\r\n\r\ninterface CarListActions {\r\n    getFindedCrew: (object: any) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): CarListState => ({\r\n    address: state.main.address,\r\n    coord: state.main.coord,\r\n    isValid: state.main.isValid,\r\n    findedCrew: state.main.findedCrew,\r\n    crewSort: getCrewSort(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, {getFindedCrew})(CarList)\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport Button from '@material-ui/core/Button'\r\nimport {RootState} from '../../store'\r\nimport {sendOrder} from \"../../store/actions\"\r\nimport {CoordType} from \"../../store/types\"\r\nimport {CrewDataType} from \"../../DAL/types\"\r\nimport {getCrewSort} from \"../../utils/selectors\"\r\nimport {getDateFormat} from \"../../utils/dateFormat\"\r\n\r\n\r\nfunction FormAction(props: any) {\r\n\r\n    const handleClickSendButton = () => {\r\n        const {address, isValid, coord, sendOrder, findedCrew} = props\r\n\r\n        const suitableCar = findedCrew && findedCrew.length ? findedCrew[0] : undefined\r\n\r\n        if (isValid && coord && suitableCar) {\r\n            sendOrder({\r\n                source_time: getDateFormat(),\r\n                addresses: [{\r\n                    address: address,\r\n                    lat: coord[0],\r\n                    lon: coord[1]\r\n                }],\r\n                crew_id: suitableCar.crew_id\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CardActions>\r\n            <Button\r\n                size=\"small\"\r\n                onClick={handleClickSendButton}\r\n                disabled={!props.isValid}\r\n            >Заказать</Button>\r\n        </CardActions>\r\n    );\r\n}\r\n\r\ninterface AppState {\r\n    coord: CoordType\r\n    address: string\r\n    isValid: boolean\r\n    findedCrew: Array<CrewDataType> | []\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): AppState => ({\r\n    coord: state.main.coord,\r\n    address: state.main.address,\r\n    isValid: state.main.isValid,\r\n    findedCrew: getCrewSort(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, {sendOrder})(FormAction)\r\n","import React from 'react'\nimport {Provider} from 'react-redux'\nimport {makeStyles} from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography'\nimport './App.css'\nimport Form from \"../Form/Form\"\nimport MapTaxi from \"../MapTaxi/MapTaxi\"\nimport FindCar from \"../FindCar/FindCar\"\nimport store from '../../store'\nimport CarList from \"../CarList/CarList\"\nimport FormAction from \"../Form/FormAction\"\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 600,\n    },\n    container: {\n        display: 'flex',\n    }\n})\n\nfunction App() {\n\n    const classes = useStyles();\n\n\n    return (\n        <Provider store={store}>\n            <Card className={classes.root} variant=\"outlined\">\n\n                <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\" color=\"textSecondary\" gutterBottom>\n                        Детали заказа\n                    </Typography>\n                    <Divider variant=\"fullWidth\"/>\n                    <Form/>\n                    <FindCar/>\n\n                    <div className={classes.container}>\n                        <MapTaxi/>\n                        <CarList/>\n                    </div>\n                </CardContent>\n\n                <FormAction/>\n\n            </Card>\n        </Provider>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}